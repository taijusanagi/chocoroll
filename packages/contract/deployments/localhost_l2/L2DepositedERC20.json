{
  "address": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2CrossDomainMessenger",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "DepositFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract iOVM_L1TokenGateway",
          "name": "_l1TokenGateway",
          "type": "address"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalInitiated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "finalizeDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFinalizeWithdrawalL1Gas",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract iOVM_L1TokenGateway",
          "name": "_l1TokenGateway",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1TokenGateway",
      "outputs": [
        {
          "internalType": "contract iOVM_L1TokenGateway",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messenger",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x316591e627b76fc5fae4a96e1e774eb0b78121c08a450f58403af871d011946d",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
    "transactionIndex": 0,
    "gasUsed": "2205053",
    "logsBloom": "0x
    "blockHash": "0x30e41e9fff43e7dbcd425dda0ec447d3be8378288aada0ca18b0e25991267f61",
    "transactionHash": "0x316591e627b76fc5fae4a96e1e774eb0b78121c08a450f58403af871d011946d",
    "logs": [],
    "blockNumber": 70,
    "cumulativeGasUsed": "2205053",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x4200000000000000000000000000000000000007", "name", "symbol"],
  "solcInputHash": "3a15110f39550402d4deaa08fb647e43",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+ovm+commit.c88bc4b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2CrossDomainMessenger\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DepositFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract iOVM_L1TokenGateway\",\"name\":\"_l1TokenGateway\",\"type\":\"address\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalInitiated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"finalizeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFinalizeWithdrawalL1Gas\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract iOVM_L1TokenGateway\",\"name\":\"_l1TokenGateway\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1TokenGateway\",\"outputs\":[{\"internalType\":\"contract iOVM_L1TokenGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messenger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"finalizeDeposit(address,uint256)\":{\"details\":\"Complete a deposit from L1 to L2, and credits funds to the recipient's balance of this  L2 token.  This call will fail if it did not originate from a corresponding deposit in OVM_l1TokenGateway. \",\"params\":{\"_amount\":\"Amount of the token to withdraw\",\"_to\":\"Address to receive the withdrawal at\"}},\"getFinalizeWithdrawalL1Gas()\":{\"details\":\"Overridable getter for the *L1* gas limit of settling the withdrawal, in the case it may be dynamic, and the above public constant does not suffice.\"},\"init(address)\":{\"details\":\"Initialize this contract with the L1 token gateway address. The flow: 1) this contract gets deployed on L2, 2) the L1 gateway is deployed with addr from (1), 3) L1 gateway address passed here.\",\"params\":{\"_l1TokenGateway\":\"Address of the corresponding L1 gateway deployed to the main chain\"}},\"withdraw(uint256)\":{\"details\":\"initiate a withdraw of some tokens to the caller's account on L1\",\"params\":{\"_amount\":\"Amount of the token to withdraw\"}},\"withdrawTo(address,uint256)\":{\"details\":\"initiate a withdraw of some token to a recipient's account on L1\",\"params\":{\"_amount\":\"Amount of the token to withdraw\",\"_to\":\"L1 adress to credit the withdrawal to\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L2DepositedERC20.sol\":\"L2DepositedERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@eth-optimism/contracts/build/contracts/OVM/bridge/tokens/Abs_L2DepositedToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Interface Imports */\\nimport { iOVM_L2DepositedToken } from \\\"../../../iOVM/bridge/tokens/iOVM_L2DepositedToken.sol\\\";\\nimport { iOVM_L1TokenGateway } from \\\"../../../iOVM/bridge/tokens/iOVM_L1TokenGateway.sol\\\";\\n\\n/* Library Imports */\\nimport { OVM_CrossDomainEnabled } from \\\"../../../libraries/bridge/OVM_CrossDomainEnabled.sol\\\";\\n\\n/**\\n * @title Abs_L2DepositedToken\\n * @dev An L2 Deposited Token is an L2 representation of funds which were deposited from L1.\\n * Usually contract mints new tokens when it hears about deposits into the L1 ERC20 gateway.\\n * This contract also burns the tokens intended for withdrawal, informing the L1 gateway to release L1 funds.\\n *\\n * NOTE: This abstract contract gives all the core functionality of a deposited token implementation except for the\\n * token's internal accounting itself.  This gives developers an easy way to implement children with their own token code.\\n *\\n * Compiler used: optimistic-solc\\n * Runtime target: OVM\\n */\\nabstract contract Abs_L2DepositedToken is iOVM_L2DepositedToken, OVM_CrossDomainEnabled {\\n\\n    /*******************\\n     * Contract Events *\\n     *******************/\\n\\n    event Initialized(iOVM_L1TokenGateway _l1TokenGateway);\\n\\n    /********************************\\n     * External Contract References *\\n     ********************************/\\n\\n    iOVM_L1TokenGateway public l1TokenGateway;\\n\\n    /********************************\\n     * Constructor & Initialization *\\n     ********************************/\\n\\n    /**\\n     * @param _l2CrossDomainMessenger L1 Messenger address being used for cross-chain communications.\\n     */\\n    constructor(\\n        address _l2CrossDomainMessenger\\n    )\\n        OVM_CrossDomainEnabled(_l2CrossDomainMessenger)\\n    {}\\n\\n    /**\\n     * @dev Initialize this contract with the L1 token gateway address.\\n     * The flow: 1) this contract gets deployed on L2, 2) the L1\\n     * gateway is deployed with addr from (1), 3) L1 gateway address passed here.\\n     *\\n     * @param _l1TokenGateway Address of the corresponding L1 gateway deployed to the main chain\\n     */\\n\\n    function init(\\n        iOVM_L1TokenGateway _l1TokenGateway\\n    )\\n        public\\n    {\\n        require(address(l1TokenGateway) == address(0), \\\"Contract has already been initialized\\\");\\n\\n        l1TokenGateway = _l1TokenGateway;\\n        \\n        emit Initialized(l1TokenGateway);\\n    }\\n\\n    /**********************\\n     * Function Modifiers *\\n     **********************/\\n\\n    modifier onlyInitialized() {\\n        require(address(l1TokenGateway) != address(0), \\\"Contract has not yet been initialized\\\");\\n        _;\\n    }\\n\\n    /********************************\\n     * Overridable Accounting logic *\\n     ********************************/\\n\\n    // Default gas value which can be overridden if more complex logic runs on L2.\\n    uint32 constant DEFAULT_FINALIZE_WITHDRAWAL_L1_GAS = 100000;\\n\\n    /**\\n     * @dev Core logic to be performed when a withdrawal from L2 is initialized.\\n     * In most cases, this will simply burn the withdrawn L2 funds.\\n     *\\n     * @param _to Address being withdrawn to\\n     * @param _amount Amount being withdrawn\\n     */\\n\\n    function _handleInitiateWithdrawal(\\n        address _to,\\n        uint _amount\\n    )\\n        internal\\n        virtual\\n    {\\n        revert(\\\"Accounting must be implemented by child contract.\\\");\\n    }\\n\\n    /**\\n     * @dev Core logic to be performed when a deposit from L2 is finalized on L2.\\n     * In most cases, this will simply _mint() to credit L2 funds to the recipient.\\n     *\\n     * @param _to Address being deposited to on L2\\n     * @param _amount Amount which was deposited on L1\\n     */\\n    function _handleFinalizeDeposit(\\n        address _to,\\n        uint _amount\\n    )\\n        internal\\n        virtual\\n    {\\n        revert(\\\"Accounting must be implemented by child contract.\\\");\\n    }\\n\\n    /**\\n     * @dev Overridable getter for the *L1* gas limit of settling the withdrawal, in the case it may be\\n     * dynamic, and the above public constant does not suffice.\\n     *\\n     */\\n\\n    function getFinalizeWithdrawalL1Gas()\\n        public\\n        view\\n        virtual\\n        returns(\\n            uint32\\n        )\\n    {\\n        return DEFAULT_FINALIZE_WITHDRAWAL_L1_GAS;\\n    }\\n\\n\\n    /***************\\n     * Withdrawing *\\n     ***************/\\n\\n    /**\\n     * @dev initiate a withdraw of some tokens to the caller's account on L1\\n     * @param _amount Amount of the token to withdraw\\n     */\\n    function withdraw(\\n        uint _amount\\n    )\\n        external\\n        override\\n        onlyInitialized()\\n    {\\n        _initiateWithdrawal(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @dev initiate a withdraw of some token to a recipient's account on L1\\n     * @param _to L1 adress to credit the withdrawal to\\n     * @param _amount Amount of the token to withdraw\\n     */\\n    function withdrawTo(\\n        address _to,\\n        uint _amount\\n    )\\n        external\\n        override\\n        onlyInitialized()\\n    {\\n        _initiateWithdrawal(_to, _amount);\\n    }\\n\\n    /**\\n     * @dev Performs the logic for deposits by storing the token and informing the L2 token Gateway of the deposit.\\n     *\\n     * @param _to Account to give the withdrawal to on L1\\n     * @param _amount Amount of the token to withdraw\\n     */\\n    function _initiateWithdrawal(\\n        address _to,\\n        uint _amount\\n    )\\n        internal\\n    {\\n        // Call our withdrawal accounting handler implemented by child contracts (usually a _burn)\\n        _handleInitiateWithdrawal(_to, _amount);\\n\\n        // Construct calldata for l1TokenGateway.finalizeWithdrawal(_to, _amount)\\n        bytes memory data = abi.encodeWithSelector(\\n            iOVM_L1TokenGateway.finalizeWithdrawal.selector,\\n            _to,\\n            _amount\\n        );\\n\\n        // Send message up to L1 gateway\\n        sendCrossDomainMessage(\\n            address(l1TokenGateway),\\n            data,\\n            getFinalizeWithdrawalL1Gas()\\n        );\\n\\n        emit WithdrawalInitiated(msg.sender, _to, _amount);\\n    }\\n\\n    /************************************\\n     * Cross-chain Function: Depositing *\\n     ************************************/\\n\\n    /**\\n     * @dev Complete a deposit from L1 to L2, and credits funds to the recipient's balance of this \\n     * L2 token. \\n     * This call will fail if it did not originate from a corresponding deposit in OVM_l1TokenGateway. \\n     *\\n     * @param _to Address to receive the withdrawal at\\n     * @param _amount Amount of the token to withdraw\\n     */\\n    function finalizeDeposit(\\n        address _to,\\n        uint _amount\\n    )\\n        external\\n        override \\n        onlyInitialized()\\n        onlyFromCrossDomainAccount(address(l1TokenGateway))\\n    {\\n        _handleFinalizeDeposit(_to, _amount);\\n        emit DepositFinalized(_to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x350bec3334009f540920c6e665f066ce5a1ef7c3864a9c007dedb12db3dd6ffa\",\"license\":\"MIT\"},\"@eth-optimism/contracts/build/contracts/OVM/bridge/tokens/OVM_L2DepositedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Interface Imports */\\nimport { iOVM_L1TokenGateway } from \\\"../../../iOVM/bridge/tokens/iOVM_L1TokenGateway.sol\\\";\\n\\n/* Contract Imports */\\nimport { UniswapV2ERC20 } from \\\"../../../libraries/standards/UniswapV2ERC20.sol\\\";\\n\\n/* Library Imports */\\nimport { Abs_L2DepositedToken } from \\\"./Abs_L2DepositedToken.sol\\\";\\n\\n/**\\n * @title OVM_L2DepositedERC20\\n * @dev The L2 Deposited ERC20 is an ERC20 implementation which represents L1 assets deposited into L2.\\n * This contract mints new tokens when it hears about deposits into the L1 ERC20 gateway.\\n * This contract also burns the tokens intended for withdrawal, informing the L1 gateway to release L1 funds.\\n *\\n * NOTE: This contract implements the Abs_L2DepositedToken contract using Uniswap's ERC20 as the implementation.\\n * Alternative implementations can be used in this similar manner.\\n *\\n * Compiler used: optimistic-solc\\n * Runtime target: OVM\\n */\\ncontract OVM_L2DepositedERC20 is Abs_L2DepositedToken, UniswapV2ERC20 {\\n\\n    /***************\\n     * Constructor *\\n     ***************/\\n\\n    /**\\n     * @param _l2CrossDomainMessenger Cross-domain messenger used by this contract.\\n     * @param _name ERC20 name\\n     * @param _symbol ERC20 symbol\\n     */\\n    constructor(\\n        address _l2CrossDomainMessenger,\\n        string memory _name,\\n        string memory _symbol\\n    )\\n        public\\n        Abs_L2DepositedToken(_l2CrossDomainMessenger)\\n        UniswapV2ERC20(_name, _symbol)\\n    {}\\n\\n    // When a withdrawal is initiated, we burn the withdrawer's funds to prevent subsequent L2 usage.\\n    function _handleInitiateWithdrawal(\\n        address _to,\\n        uint _amount\\n    )\\n        internal\\n        override\\n    {\\n        _burn(msg.sender, _amount);\\n    }\\n\\n    // When a deposit is finalized, we credit the account on L2 with the same amount of tokens.\\n    function _handleFinalizeDeposit(\\n        address _to,\\n        uint _amount\\n    )\\n        internal\\n        override\\n    {\\n        _mint(_to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0xf863eeb0148550694d76d3fab75bede923bca730e55580abb0d87c407a4a3051\",\"license\":\"MIT\"},\"@eth-optimism/contracts/build/contracts/iOVM/bridge/messaging/iAbs_BaseCrossDomainMessenger.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title iAbs_BaseCrossDomainMessenger\\n */\\ninterface iAbs_BaseCrossDomainMessenger {\\n\\n    /**********\\n     * Events *\\n     **********/\\n    event SentMessage(bytes message);\\n    event RelayedMessage(bytes32 msgHash);\\n\\n    /**********************\\n     * Contract Variables *\\n     **********************/\\n    function xDomainMessageSender() external view returns (address);\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Sends a cross domain message to the target messenger.\\n     * @param _target Target contract address.\\n     * @param _message Message to send to the target.\\n     * @param _gasLimit Gas limit for the provided message.\\n     */\\n    function sendMessage(\\n        address _target,\\n        bytes calldata _message,\\n        uint32 _gasLimit\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc2bd6b373daae2ede34281f4be5938d02b9d1cfb056b40d65ff70b7f16ce3c86\",\"license\":\"MIT\"},\"@eth-optimism/contracts/build/contracts/iOVM/bridge/tokens/iOVM_L1TokenGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title iOVM_L1TokenGateway\\n */\\ninterface iOVM_L1TokenGateway {\\n\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event DepositInitiated(\\n        address indexed _from,\\n        address _to,\\n        uint256 _amount\\n    );\\n  \\n    event WithdrawalFinalized(\\n        address indexed _to,\\n        uint256 _amount\\n    );\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    function deposit(\\n        uint _amount\\n    )\\n        external;\\n\\n    function depositTo(\\n        address _to,\\n        uint _amount\\n    )\\n        external;\\n\\n\\n    /*************************\\n     * Cross-chain Functions *\\n     *************************/\\n\\n    function finalizeWithdrawal(\\n        address _to,\\n        uint _amount\\n    )\\n        external;\\n}\\n\",\"keccak256\":\"0xc5503d644d170daa5b46a1228f5c73ef6d068226a2b2acc62d41df00c36b900e\",\"license\":\"MIT\"},\"@eth-optimism/contracts/build/contracts/iOVM/bridge/tokens/iOVM_L2DepositedToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title iOVM_L2DepositedToken\\n */\\ninterface iOVM_L2DepositedToken {\\n\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event WithdrawalInitiated(\\n        address indexed _from,\\n        address _to,\\n        uint256 _amount\\n    );\\n\\n    event DepositFinalized(\\n        address indexed _to,\\n        uint256 _amount\\n    );    \\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    function withdraw(\\n        uint _amount\\n    )\\n        external;\\n\\n    function withdrawTo(\\n        address _to,\\n        uint _amount\\n    )\\n        external;\\n\\n\\n    /*************************\\n     * Cross-chain Functions *\\n     *************************/\\n\\n    function finalizeDeposit(\\n        address _to,\\n        uint _amount\\n    )\\n        external;\\n}\\n\",\"keccak256\":\"0xaa874355e98c444a58712179acaf5ca344296dfa8229577a38a1d14160ce46f8\",\"license\":\"MIT\"},\"@eth-optimism/contracts/build/contracts/libraries/bridge/OVM_CrossDomainEnabled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n/* Interface Imports */\\nimport { iAbs_BaseCrossDomainMessenger } from \\\"../../iOVM/bridge/messaging/iAbs_BaseCrossDomainMessenger.sol\\\";\\n\\n/**\\n * @title OVM_CrossDomainEnabled\\n * @dev Helper contract for contracts performing cross-domain communications\\n *\\n * Compiler used: defined by inheriting contract\\n * Runtime target: defined by inheriting contract\\n */\\ncontract OVM_CrossDomainEnabled {\\n    // Messenger contract used to send and recieve messages from the other domain.\\n    address public messenger;\\n\\n    /***************\\n     * Constructor *\\n     ***************/    \\n    constructor(\\n        address _messenger\\n    ) {\\n        messenger = _messenger;\\n    }\\n\\n    /**********************\\n     * Function Modifiers *\\n     **********************/\\n\\n    /**\\n     * @notice Enforces that the modified function is only callable by a specific cross-domain account.\\n     * @param _sourceDomainAccount The only account on the originating domain which is authenticated to call this function.\\n     */\\n    modifier onlyFromCrossDomainAccount(\\n        address _sourceDomainAccount\\n    ) {\\n        require(\\n            msg.sender == address(getCrossDomainMessenger()),\\n            \\\"OVM_XCHAIN: messenger contract unauthenticated\\\"\\n        );\\n\\n        require(\\n            getCrossDomainMessenger().xDomainMessageSender() == _sourceDomainAccount,\\n            \\\"OVM_XCHAIN: wrong sender of cross-domain message\\\"\\n        );\\n\\n        _;\\n    }\\n    \\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * @notice Gets the messenger, usually from storage.  This function is exposed in case a child contract needs to override.\\n     * @return The address of the cross-domain messenger contract which should be used. \\n     */\\n    function getCrossDomainMessenger()\\n        internal\\n        virtual\\n        returns(\\n            iAbs_BaseCrossDomainMessenger\\n        )\\n    {\\n        return iAbs_BaseCrossDomainMessenger(messenger);\\n    }\\n\\n    /**\\n     * @notice Sends a message to an account on another domain\\n     * @param _crossDomainTarget The intended recipient on the destination domain\\n     * @param _data The data to send to the target (usually calldata to a function with `onlyFromCrossDomainAccount()`)\\n     * @param _gasLimit The gasLimit for the receipt of the message on the target domain.\\n     */\\n    function sendCrossDomainMessage(\\n        address _crossDomainTarget,\\n        bytes memory _data,\\n        uint32 _gasLimit\\n    ) internal {\\n        getCrossDomainMessenger().sendMessage(_crossDomainTarget, _data, _gasLimit);\\n    }\\n}\\n\",\"keccak256\":\"0x1b1c5adbb359f3f46ca9e43b366a80563c031560e9f1f24ab4742b2d79403ce7\",\"license\":\"MIT\"},\"@eth-optimism/contracts/build/contracts/libraries/standards/IUniswapV2ERC20.sol\":{\"content\":\"pragma solidity >=0.5.16 <0.8.0;\\n\\ninterface IUniswapV2ERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0x8c2dbb5e4d14a596c840620c736b21a98c3f450bd4dc35195fd71abe46f2be23\"},\"@eth-optimism/contracts/build/contracts/libraries/standards/UniSafeMath.sol\":{\"content\":\"pragma solidity >=0.5.16 <0.8.0;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary UniSafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\n    }\\n}\\n\",\"keccak256\":\"0xa50754adfb35b4ff99e4fd9b1ee13d7a72d85a3e6b6ed3262aab8be03034e512\"},\"@eth-optimism/contracts/build/contracts/libraries/standards/UniswapV2ERC20.sol\":{\"content\":\"pragma solidity >=0.5.16 <0.8.0;\\n\\nimport './IUniswapV2ERC20.sol';\\nimport './UniSafeMath.sol';\\n\\ncontract UniswapV2ERC20 is IUniswapV2ERC20 {\\n    using UniSafeMath for uint;\\n\\n    string public override name;\\n    string public override symbol;\\n    uint8 public constant override decimals = 18;\\n    uint public override totalSupply;\\n    mapping(address => uint) public override balanceOf;\\n    mapping(address => mapping(address => uint)) public override allowance;\\n\\n    bytes32 public override DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant override PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint) public override nonces;\\n\\n    constructor(\\n    string memory _name,\\n        string memory _symbol\\n    ) public {\\n        name = _name;\\n        symbol = _symbol;\\n\\n        uint chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\n                keccak256(bytes(name)),\\n                keccak256(bytes('1')),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function _mint(address to, uint value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(address owner, address spender, uint value) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(address from, address to, uint value) private {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint value) external override returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint value) external override returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(address from, address to, uint value) external override returns (bool) {\\n        if (allowance[from][msg.sender] != uint(-1)) {\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external override {\\n        require(deadline >= block.timestamp, 'UniswapV2: EXPIRED');\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                '\\\\x19\\\\x01',\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'UniswapV2: INVALID_SIGNATURE');\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0x28d3beed37d205e1c71a9dc1a0b542e689af6dc3d8e74c1fd2b6033e87137781\"},\"contracts/L2DepositedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {OVM_L2DepositedERC20} from \\\"@eth-optimism/contracts/build/contracts/OVM/bridge/tokens/OVM_L2DepositedERC20.sol\\\";\\n\\ncontract L2DepositedERC20 is OVM_L2DepositedERC20 {\\n    constructor(\\n        address _l2CrossDomainMessenger,\\n        string memory _name,\\n        string memory _symbol\\n    ) OVM_L2DepositedERC20(_l2CrossDomainMessenger, _name, _symbol) {}\\n}\\n\",\"keccak256\":\"0x0bd2bfa984f4da9479a5bd66602a17b6fee52b2078d926efa5dedf1d6b791c3f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001c57600080620000196200029e565b50505b5060405162002dc238038062002dc28339818101604052810190620000429190620005ce565b82828281818480806000806101000a816200005c6200030e565b8173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217906200009a62000373565b50505050508160029080519060200190620000b7929190620003da565b508060039080519060200190620000d0929190620003da565b5060005a620000de620004a6565b90507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6002604051808280620001136200030e565b600181600116156101000203166002900480156200017d5780601f1062000151576101008083620001436200030e565b04028352918201916200017d565b820191906000526020600020905b816200016a6200030e565b815290600101906020018083116200015f575b505091505060405180910390206040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525080519060200120835a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b6040811015620002235760008183015260208101905062000207565b505050604051602001808681526020018581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019550505050505060405160208183030381529060405280519060200120600781906200028c62000373565b5050505050505050505050506200076f565b632a2a7adb598160e01b8152600481016020815285602082015260005b86811015620002db578086015181604084010152602081019050620002bb565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b60408110156200036e5760008183015260208101905062000352565b505050565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b60005b6040811015620003d557600081830152602081019050620003b9565b505050565b8280620003e66200030e565b600181600116156101000203166002900490600052602060002090601f01602090048101928262000426576000856200041e62000373565b505062000493565b82601f106200044c57805160ff191683800117856200044462000373565b505062000493565b828001600101856200045d62000373565b5050821562000493579182015b8281111562000492578251826200048062000373565b5050916020019190600101906200046a565b5b509050620004a2919062000505565b5090565b6390580256598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b60408110156200050057600081830152602081019050620004e4565b505050565b5b808211156200052b576000816000906200051f62000373565b50505060010162000506565b5090565b6000620005466200054084620006ab565b62000677565b9050828152602081018484840111156200056a57600080620005676200029e565b50505b6200057784828562000712565b509392505050565b60008151905062000590816200074a565b92915050565b600082601f830112620005b357600080620005b06200029e565b50505b8151620005c58482602086016200052f565b91505092915050565b600080600060608486031215620005ef57600080620005ec6200029e565b50505b6000620005ff868287016200057f565b935050602084015167ffffffffffffffff8111156200062857600080620006256200029e565b50505b620006368682870162000596565b925050604084015167ffffffffffffffff8111156200065f576000806200065c6200029e565b50505b6200066d8682870162000596565b9150509250925092565b6000604051905081810181811067ffffffffffffffff82111715620006a157620006a062000748565b5b8060405250919050565b600067ffffffffffffffff821115620006c957620006c862000748565b5b601f19601f8301169050602081019050919050565b6000620006eb82620006f2565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b838110156200073257808201518184015260208101905062000715565b8381111562000742576000848401525b50505050565bfe5b6200075581620006de565b81146200076c57600080620007696200029e565b50505b50565b612643806200077f6000396000f3fe608060405234801561001957600080610016611aae565b50505b50600436106101355760003560e01c80633cb747bf116100b6578063a84ce98c1161007a578063a84ce98c14610345578063a9059cbb14610363578063bdeaf64114610393578063d505accf146103b1578063dd62ed3e146103cd57610135565b80633cb747bf1461028d57806370a08231146102ab5780637ecebe00146102db5780638d6e9a5b1461030b57806395d89b411461032757610135565b806323b872dd116100fd57806323b872dd146101e75780632e1a7d4d1461021757806330adf81f14610233578063313ce567146102515780633644e5151461026f57610135565b806306fdde0314610143578063095ea7b31461016157806318160ddd1461019157806319ab453c146101af578063205c2878146101cb575b600080610140611aae565b50505b61014b6103fd565b604051610158919061238c565b60405180910390f35b61017b600480360381019061017691906120e0565b6104b7565b604051610188919061233b565b60405180910390f35b6101996104d6565b6040516101a691906123ee565b60405180910390f35b6101c960048036038101906101c49190612125565b6104e3565b005b6101e560048036038101906101e091906120e0565b610638565b005b61020160048036038101906101fc9190611fe1565b6106e8565b60405161020e919061233b565b60405180910390f35b610231600480360381019061022c9190612157565b6108e2565b005b61023b610999565b6040516102489190612356565b60405180910390f35b6102596109c0565b6040516102669190612424565b60405180910390f35b6102776109c5565b6040516102849190612356565b60405180910390f35b6102956109d2565b6040516102a291906122f7565b60405180910390f35b6102c560048036038101906102c09190611f6a565b6109fd565b6040516102d291906123ee565b60405180910390f35b6102f560048036038101906102f09190611f6a565b610a1c565b60405161030291906123ee565b60405180910390f35b610325600480360381019061032091906120e0565b610a3b565b005b61032f610d42565b60405161033c919061238c565b60405180910390f35b61034d610dfc565b60405161035a9190612371565b60405180910390f35b61037d600480360381019061037891906120e0565b610e29565b60405161038a919061233b565b60405180910390f35b61039b610e48565b6040516103a89190612409565b60405180910390f35b6103cb60048036038101906103c69190612039565b610e53565b005b6103e760048036038101906103e29190611f9c565b6111ae565b6040516103f491906123ee565b60405180910390f35b600280610408611b1c565b600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280610443611b1c565b600181600116156101000203166002900480156104af5780601f1061047d57610100808361046f611b1c565b0402835291602001916104af565b820191906000526020600020905b81610494611b1c565b8152906001019060200180831161048b57829003601f168201915b505050505081565b60006104cc5a6104c5611b7f565b84846111da565b6001905092915050565b60046104e0611b1c565b81565b600073ffffffffffffffffffffffffffffffffffffffff166001600090610508611b1c565b906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610584576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610572906123ae565b60405180910390610581611aae565b50505b80600160006101000a81610596611b1c565b8173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217906105d2611bdc565b5050507f908408e307fc569b417f6cbec5d5a06f44a0a505ac0479b47d421a4b2fd6a1e66001600090610603611b1c565b906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405161062d9190612371565b60405180910390a150565b600073ffffffffffffffffffffffffffffffffffffffff16600160009061065d611b1c565b906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156106da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c8906123ce565b604051809103906106d7611aae565b50505b6106e482826112ce565b5050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005a610755611b7f565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610797611b1c565b146108cc5761083a82600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005a6107ea611b7f565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061082c611b1c565b6113ec90919063ffffffff16565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005a610884611b7f565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081906108c8611bdc565b5050505b6108d7848484611478565b600190509392505050565b600073ffffffffffffffffffffffffffffffffffffffff166001600090610907611b1c565b906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610984576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610972906123ce565b60405180910390610981611aae565b50505b6109965a610990611b7f565b826112ce565b50565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960001b81565b601281565b60076109cf611b1c565b81565b6000806109dd611b1c565b906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6005602052806000526040600020600091509050610a19611b1c565b81565b6008602052806000526040600020600091509050610a38611b1c565b81565b600073ffffffffffffffffffffffffffffffffffffffff166001600090610a60611b1c565b906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610add576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610acb906123ce565b60405180910390610ada611aae565b50505b6001600090610aea611b1c565b906101000a900473ffffffffffffffffffffffffffffffffffffffff16610b0f61162c565b73ffffffffffffffffffffffffffffffffffffffff165a610b2e611b7f565b73ffffffffffffffffffffffffffffffffffffffff1614610ba3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001806125e5602e913960400191505060405180910390610ba0611aae565b50505b8073ffffffffffffffffffffffffffffffffffffffff16610bc261162c565b73ffffffffffffffffffffffffffffffffffffffff16636e296e456040518163ffffffff1660e01b81526004016020604051808303818680610c02611c41565b158015610c1757600080610c14611aae565b50505b505a610c21611ca4565b5050505050158015610c40573d6000803e3d6000610c3d611aae565b50505b505050506040513d6020811015610c5f57600080610c5c611aae565b50505b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614610ce5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806126136030913960400191505060405180910390610ce2611aae565b50505b610cef838361165c565b8273ffffffffffffffffffffffffffffffffffffffff167f162eb12ad2bd8b6ca7960f162208414ab3bc2da9f37953788ffd8cf850c3492b83604051610d3591906123ee565b60405180910390a2505050565b600380610d4d611b1c565b600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280610d88611b1c565b60018160011615610100020316600290048015610df45780601f10610dc2576101008083610db4611b1c565b040283529160200191610df4565b820191906000526020600020905b81610dd9611b1c565b81529060010190602001808311610dd057829003601f168201915b505050505081565b6001600090610e09611b1c565b906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610e3e5a610e37611b7f565b8484611478565b6001905092915050565b6000620186a0905090565b5a610e5c611da4565b841015610eda576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f556e697377617056323a2045585049524544000000000000000000000000000081525060200191505060405180910390610ed7611aae565b50505b60006007610ee6611b1c565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960001b898989600860008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081610f57611b1c565b80929190600101919050610f69611bdc565b50508a604051602001808781526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182815260200196505050505050506040516020818303038152906040528051906020012060405160200180807f190100000000000000000000000000000000000000000000000000000000000081525060020183815260200182815260200192505050604051602081830303815290604052805190602001209050600060018286868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855a61108a611ca4565b50505050501580156110a9573d6000803e3d60006110a6611aae565b50505b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415801561111d57508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b611198576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f556e697377617056323a20494e56414c49445f5349474e41545552450000000081525060200191505060405180910390611195611aae565b50505b6111a38989896111da565b505050505050505050565b6006602052816000526040600020602052806000526040600020600091509150506111d7611b1c565b81565b80600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190611261611bdc565b5050508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b6112d8828261166a565b600063f4f7b41a60e01b83836040516024016112f5929190612312565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905061138f6001600090611364611b1c565b906101000a900473ffffffffffffffffffffffffffffffffffffffff168261138a610e48565b611680565b5a611398611b7f565b73ffffffffffffffffffffffffffffffffffffffff167fbb2689ff876f7ef453cf8865dde5ab10349d222e2e1383c5152fbdb083f02da284846040516113df929190612312565b60405180910390a2505050565b6000828284039150811115611472576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f64732d6d6174682d7375622d756e646572666c6f7700000000000000000000008152506020019150506040518091039061146f611aae565b50505b92915050565b6114d181600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206114c3611b1c565b6113ec90919063ffffffff16565b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819061151a611bdc565b50505061157681600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611568611b1c565b6117ae90919063ffffffff16565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081906115bf611bdc565b5050508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b60008060009061163a611b1c565b906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611666828261183a565b5050565b61167c5a611676611b7f565b82611974565b5050565b61168861162c565b73ffffffffffffffffffffffffffffffffffffffff16633dbb202b8484846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff168152602001806020018363ffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561171d578082015181840152602081019050611702565b50505050905090810190601f16801561174a5780820380516001836020036101000a031916815260200191505b5094505050505060006040518083038160008780611766611c41565b15801561177b57600080611778611aae565b50505b505a611785611e01565b5050505050501580156117a5573d6000803e3d60006117a2611aae565b50505b50505050505050565b6000828284019150811015611834576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d6d6174682d6164642d6f766572666c6f7700000000000000000000000081525060200191505060405180910390611831611aae565b50505b92915050565b611856816004611848611b1c565b6117ae90919063ffffffff16565b60048190611862611bdc565b5050506118be81600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206118b0611b1c565b6117ae90919063ffffffff16565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190611907611bdc565b5050508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b6119cd81600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206119bf611b1c565b6113ec90919063ffffffff16565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190611a16611bdc565b505050611a35816004611a27611b1c565b6113ec90919063ffffffff16565b60048190611a41611bdc565b505050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b632a2a7adb598160e01b8152600481016020815285602082015260005b86811015611ae9578086015181604084010152602081019050611acb565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b6040811015611b7a57600081830152602081019050611b60565b505050565b6373509064598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b6040811015611bd757600081830152602081019050611bbd565b505050565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b60005b6040811015611c3c57600081830152602081019050611c22565b505050565b638435035b598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b6040811015611c9f57600081830152602081019050611c85565b505050565b638540661f598160e01b8152611ce3565b600081905081831115611cc6578290505b92915050565b600081905081831015611cdd578290505b92915050565b836004820152846024820152606060448201528660648201526084810160005b88811015611d1e578088015181830152602081019050611d03565b506060828960a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8b8b82606087013350600060045af15059611d738d3d611ccc565b8c01611d7f8187611cb5565b5b82811015611d975760008152602081019050611d80565b50839d5050505050505050565b63bdbf8c36598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b6040811015611dfc57600081830152602081019050611de2565b505050565b6385979f76598160e01b8152611e40565b600081905081831115611e23578290505b92915050565b600081905081831015611e3a578290505b92915050565b836004820152846024820152606060448201528760648201526084810160005b89811015611e7b578089015181830152602081019050611e60565b506060828a60a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8c8c82606087013350600060045af15059611ed08e3d611e29565b8d01611edc8187611e12565b5b82811015611ef45760008152602081019050611edd565b50839e5050505050505050565b600081359050611f1081612544565b92915050565b600081359050611f2581612564565b92915050565b600081359050611f3a81612584565b92915050565b600081359050611f4f816125a4565b92915050565b600081359050611f64816125c4565b92915050565b600060208284031215611f8557600080611f82611aae565b50505b6000611f9384828501611f01565b91505092915050565b60008060408385031215611fb857600080611fb5611aae565b50505b6000611fc685828601611f01565b9250506020611fd785828601611f01565b9150509250929050565b600080600060608486031215611fff57600080611ffc611aae565b50505b600061200d86828701611f01565b935050602061201e86828701611f01565b925050604061202f86828701611f40565b9150509250925092565b600080600080600080600060e0888a03121561205d5760008061205a611aae565b50505b600061206b8a828b01611f01565b975050602061207c8a828b01611f01565b965050604061208d8a828b01611f40565b955050606061209e8a828b01611f40565b94505060806120af8a828b01611f55565b93505060a06120c08a828b01611f16565b92505060c06120d18a828b01611f16565b91505092959891949750929550565b600080604083850312156120fc576000806120f9611aae565b50505b600061210a85828601611f01565b925050602061211b85828601611f40565b9150509250929050565b6000602082840312156121405760008061213d611aae565b50505b600061214e84828501611f2b565b91505092915050565b6000602082840312156121725760008061216f611aae565b50505b600061218084828501611f40565b91505092915050565b6121928161245b565b82525050565b6121a18161246d565b82525050565b6121b081612479565b82525050565b6121bf816124dc565b82525050565b60006121d08261243f565b6121da818561244a565b93506121ea818560208601612500565b6121f381612533565b840191505092915050565b600061220b60258361244a565b91507f436f6e74726163742068617320616c7265616479206265656e20696e6974696160008301527f6c697a65640000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061227160258361244a565b91507f436f6e747261637420686173206e6f7420796574206265656e20696e6974696160008301527f6c697a65640000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6122d3816124b5565b82525050565b6122e2816124bf565b82525050565b6122f1816124cf565b82525050565b600060208201905061230c6000830184612189565b92915050565b60006040820190506123276000830185612189565b61233460208301846122ca565b9392505050565b60006020820190506123506000830184612198565b92915050565b600060208201905061236b60008301846121a7565b92915050565b600060208201905061238660008301846121b6565b92915050565b600060208201905081810360008301526123a681846121c5565b905092915050565b600060208201905081810360008301526123c7816121fe565b9050919050565b600060208201905081810360008301526123e781612264565b9050919050565b600060208201905061240360008301846122ca565b92915050565b600060208201905061241e60008301846122d9565b92915050565b600060208201905061243960008301846122e8565b92915050565b600081519050919050565b600082825260208201905092915050565b600061246682612495565b9050919050565b60008115159050919050565b6000819050919050565b600061248e8261245b565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b60006124e7826124ee565b9050919050565b60006124f982612495565b9050919050565b60005b8381101561251e578082015181840152602081019050612503565b8381111561252d576000848401525b50505050565b6000601f19601f8301169050919050565b61254d8161245b565b81146125615760008061255e611aae565b50505b50565b61256d81612479565b81146125815760008061257e611aae565b50505b50565b61258d81612483565b81146125a15760008061259e611aae565b50505b50565b6125ad816124b5565b81146125c1576000806125be611aae565b50505b50565b6125cd816124cf565b81146125e1576000806125de611aae565b50505b5056fe4f564d5f58434841494e3a206d657373656e67657220636f6e747261637420756e61757468656e746963617465644f564d5f58434841494e3a2077726f6e672073656e646572206f662063726f73732d646f6d61696e206d657373616765",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "finalizeDeposit(address,uint256)": {
        "details": "Complete a deposit from L1 to L2, and credits funds to the recipient's balance of this  L2 token.  This call will fail if it did not originate from a corresponding deposit in OVM_l1TokenGateway. ",
        "params": {
          "_amount": "Amount of the token to withdraw",
          "_to": "Address to receive the withdrawal at"
        }
      },
      "getFinalizeWithdrawalL1Gas()": {
        "details": "Overridable getter for the *L1* gas limit of settling the withdrawal, in the case it may be dynamic, and the above public constant does not suffice."
      },
      "init(address)": {
        "details": "Initialize this contract with the L1 token gateway address. The flow: 1) this contract gets deployed on L2, 2) the L1 gateway is deployed with addr from (1), 3) L1 gateway address passed here.",
        "params": {
          "_l1TokenGateway": "Address of the corresponding L1 gateway deployed to the main chain"
        }
      },
      "withdraw(uint256)": {
        "details": "initiate a withdraw of some tokens to the caller's account on L1",
        "params": {
          "_amount": "Amount of the token to withdraw"
        }
      },
      "withdrawTo(address,uint256)": {
        "details": "initiate a withdraw of some token to a recipient's account on L1",
        "params": {
          "_amount": "Amount of the token to withdraw",
          "_to": "L1 adress to credit the withdrawal to"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 477,
        "contract": "contracts/L2DepositedERC20.sol:L2DepositedERC20",
        "label": "messenger",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 19,
        "contract": "contracts/L2DepositedERC20.sol:L2DepositedERC20",
        "label": "l1TokenGateway",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(iOVM_L1TokenGateway)344"
      },
      {
        "astId": 752,
        "contract": "contracts/L2DepositedERC20.sol:L2DepositedERC20",
        "label": "name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 755,
        "contract": "contracts/L2DepositedERC20.sol:L2DepositedERC20",
        "label": "symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 762,
        "contract": "contracts/L2DepositedERC20.sol:L2DepositedERC20",
        "label": "totalSupply",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 767,
        "contract": "contracts/L2DepositedERC20.sol:L2DepositedERC20",
        "label": "balanceOf",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 774,
        "contract": "contracts/L2DepositedERC20.sol:L2DepositedERC20",
        "label": "allowance",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 777,
        "contract": "contracts/L2DepositedERC20.sol:L2DepositedERC20",
        "label": "DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "7",
        "type": "t_bytes32"
      },
      {
        "astId": 786,
        "contract": "contracts/L2DepositedERC20.sol:L2DepositedERC20",
        "label": "nonces",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(iOVM_L1TokenGateway)344": {
        "encoding": "inplace",
        "label": "contract iOVM_L1TokenGateway",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
