{
  "language": "Solidity",
  "sources": {
    "contracts/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >0.6.0 <0.8.0;\n\ncontract ERC20 {\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    mapping(address => uint256) public balances;\n    mapping(address => mapping(address => uint256)) public allowances;\n\n    uint256 public totalSupply;\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n\n    constructor(\n        uint256 _initialSupply,\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimalUnits\n    ) public {\n        balances[msg.sender] = _initialSupply;\n        totalSupply = _initialSupply;\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimalUnits;\n    }\n\n    function balanceOf(address _owner) external view returns (uint256) {\n        return balances[_owner];\n    }\n\n    function transfer(address _to, uint256 _amount) external returns (bool) {\n        require(balances[msg.sender] >= _amount, \"You don't have enough balance to make this transfer!\");\n\n        balances[msg.sender] -= _amount;\n        balances[_to] += _amount;\n\n        emit Transfer(msg.sender, _to, _amount);\n\n        return true;\n    }\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) external returns (bool) {\n        require(\n            balances[_from] >= _amount,\n            \"Can't transfer from the desired account because it doesn't have enough balance.\"\n        );\n\n        require(\n            allowances[_from][msg.sender] >= _amount,\n            \"Can't transfer from the desired account because you don't have enough of an allowance.\"\n        );\n\n        balances[_to] += _amount;\n        balances[_from] -= _amount;\n\n        emit Transfer(_from, _to, _amount);\n\n        return true;\n    }\n\n    function approve(address _spender, uint256 _amount) external returns (bool) {\n        allowances[msg.sender][_spender] = _amount;\n\n        emit Approval(msg.sender, _spender, _amount);\n\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) external view returns (uint256) {\n        return allowances[_owner][_spender];\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
